--- magma-2.1.0/CMakeLists.txt	2016-08-30 06:37:45.000000000 -0700
+++ magma-2.1.0_patched/CMakeLists.txt	2016-10-10 19:25:01.059324822 -0700
@@ -60,7 +60,7 @@
 	message( WARNING "The compiler ${CMAKE_C_COMPILER} doesn't support the -std=c99 flag. Some code may not compile.")
 endif()
 
-
+set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -static-libstdc++ -fno-exceptions")
 # ----------------------------------------
 # check Fortran name mangling
 if ( USE_FORTRAN )
@@ -79,14 +79,14 @@
 
 # ----------------------------------------
 # locate OpenMP
-find_package( OpenMP )
-if ( OPENMP_FOUND )
-	message( STATUS "Found OpenMP" )
-	message( STATUS "    OpenMP_C_FLAGS   ${OpenMP_C_FLAGS}" )
-	message( STATUS "    OpenMP_CXX_FLAGS ${OpenMP_CXX_FLAGS}" )
-	set( CMAKE_C_FLAGS   "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}" )
-	set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}" )
-endif()
+#find_package( OpenMP )
+#if ( OPENMP_FOUND )
+#	message( STATUS "Found OpenMP" )
+#	message( STATUS "    OpenMP_C_FLAGS   ${OpenMP_C_FLAGS}" )
+#	message( STATUS "    OpenMP_CXX_FLAGS ${OpenMP_CXX_FLAGS}" )
+#	set( CMAKE_C_FLAGS   "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}" )
+#	set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}" )
+#endif()
 
 
 # ----------------------------------------
@@ -166,11 +166,18 @@
 		message( STATUS "    compile for CUDA arch 5.0 (Maxwell)" )
 	endif()
 	
+        if ( ${GPU_TARGET} MATCHES "All")
+          set( MIN_ARCH 200)
+          SET( NV_SM "-gencode arch=compute_52,code=sm_52 -gencode arch=compute_53,code=sm_53 -gencode arch=compute_60,code=sm_60 -gencode arch=compute_61,code=sm_61 -gencode arch=compute_70,code=sm_70 -gencode arch=compute_75,code=sm_75")
+          SET( NV_COMP "")
+        endif()
+
 	if ( NOT MIN_ARCH )
 		message( FATAL_ERROR "GPU_TARGET must contain one or more of Fermi, Kepler, Maxwell, or sm{20,30,35,50}." )
 	endif()
 	
-	set( CUDA_NVCC_FLAGS "${CUDA_NVCC_FLAGS} -DHAVE_CUBLAS ${NV_SM} ${NV_COMP} ${FORTRAN_CONVENTION}" )
+	set( CUDA_NVCC_FLAGS "${CUDA_NVCC_FLAGS} -DHAVE_CUBLAS -Xcompiler -fPIC ${NV_SM} ${NV_COMP} ${FORTRAN_CONVENTION}" )
+        MESSAGE(STATUS "CUDA_NVCC_FLAGS: ${CUDA_NVCC_FLAGS}")
 	add_definitions( "-DHAVE_CUBLAS -DMIN_CUDA_ARCH=${MIN_ARCH}" )
 	message( STATUS "Define -DHAVE_CUBLAS -DMIN_CUDA_ARCH=${MIN_ARCH}" )
 endif()
@@ -228,7 +235,7 @@
 # ----------------------------------------
 # common flags
 
-set( LIBS tester lapacktest magma )
+set( LIBS magma )
 
 if ( WIN32 )
 	# On Windows:
@@ -335,11 +342,11 @@
 		${CUDA_cusparse_LIBRARY}
 	)
 endif()
-
+set_target_properties(magma PROPERTIES POSITION_INDEPENDENT_CODE ON)
 
 # ----------------------------------------
 # compile tester library
-add_library( tester ${libtest_all} )
+#add_library( tester ${libtest_all} )
 
 
 # ----------------------------------------
@@ -354,13 +361,13 @@
 	endforeach()
 	add_library( lapacktest ${liblapacktest_all_f} )
 else()
-	# alternatively, use only C/C++/CUDA files, including magma_[sdcz]_no_fortran.cpp
-	foreach( f ${liblapacktest_all} )
-		if ( ${f} MATCHES "\\.(c|cu|cpp)$" )
-			list( APPEND liblapacktest_all_cpp ${f} )
-		endif()
-	endforeach()
-	add_library( lapacktest ${liblapacktest_all_cpp} )
+	# # alternatively, use only C/C++/CUDA files, including magma_[sdcz]_no_fortran.cpp
+	# foreach( f ${liblapacktest_all} )
+	# 	if ( ${f} MATCHES "\\.(c|cu|cpp)$" )
+	# 		list( APPEND liblapacktest_all_cpp ${f} )
+	# 	endif()
+	# endforeach()
+	# add_library( lapacktest ${liblapacktest_all_cpp} )
 endif()
 
 
@@ -381,41 +388,41 @@
 )
 set( LIBS_SPARSE ${LIBS} magma_sparse )
 
-
+set_target_properties(magma_sparse PROPERTIES POSITION_INDEPENDENT_CODE ON)
 # ----------------------------------------
 # compile each tester
 
 # save testers to testing/
 # save tester lib files to testing_lib/ to avoid cluttering lib/
-set( CMAKE_RUNTIME_OUTPUT_DIRECTORY testing )
-set( CMAKE_ARCHIVE_OUTPUT_DIRECTORY testing_lib )
-set( CMAKE_LIBRARY_OUTPUT_DIRECTORY testing_lib )
+# set( CMAKE_RUNTIME_OUTPUT_DIRECTORY testing )
+# set( CMAKE_ARCHIVE_OUTPUT_DIRECTORY testing_lib )
+# set( CMAKE_LIBRARY_OUTPUT_DIRECTORY testing_lib )
 
-# skip Fortran testers, which require an extra file from CUDA
-foreach( f ${testing_all} )
-	if ( ${f} MATCHES "\\.(c|cu|cpp)$" )
-		list( APPEND testing_all_cpp ${f} )
-	endif()
-endforeach()
-foreach( TEST ${testing_all_cpp} )
-	string( REGEX REPLACE "\\.(cpp|f90|F90)" "" EXE ${TEST} )
-	string( REGEX REPLACE "testing/" "" EXE ${EXE} )
-	#message( "${TEST} --> ${EXE}" )
-	add_executable( ${EXE} ${TEST} )
-	target_link_libraries( ${EXE} ${LIBS} )
-endforeach()
+# # skip Fortran testers, which require an extra file from CUDA
+# foreach( f ${testing_all} )
+# 	if ( ${f} MATCHES "\\.(c|cu|cpp)$" )
+# 		list( APPEND testing_all_cpp ${f} )
+# 	endif()
+# endforeach()
+# foreach( TEST ${testing_all_cpp} )
+# 	string( REGEX REPLACE "\\.(cpp|f90|F90)" "" EXE ${TEST} )
+# 	string( REGEX REPLACE "testing/" "" EXE ${EXE} )
+# 	#message( "${TEST} --> ${EXE}" )
+# 	add_executable( ${EXE} ${TEST} )
+# 	target_link_libraries( ${EXE} ${LIBS} )
+# endforeach()
 
 
 # ----------------------------------------
 # compile each sparse tester
-set( CMAKE_RUNTIME_OUTPUT_DIRECTORY sparse-iter/testing )
-foreach( TEST ${sparse_testing_all} )
-	string( REGEX REPLACE "\\.(cpp|f90|F90)"     "" EXE ${TEST} )
-	string( REGEX REPLACE "sparse-iter/testing/" "" EXE ${EXE} )
-	#message( "${TEST} --> ${EXE}" )
-	add_executable( ${EXE} ${TEST} )
-	target_link_libraries( ${EXE} ${LIBS_SPARSE} )
-endforeach()
+# set( CMAKE_RUNTIME_OUTPUT_DIRECTORY sparse-iter/testing )
+# foreach( TEST ${sparse_testing_all} )
+# 	string( REGEX REPLACE "\\.(cpp|f90|F90)"     "" EXE ${TEST} )
+# 	string( REGEX REPLACE "sparse-iter/testing/" "" EXE ${EXE} )
+# 	#message( "${TEST} --> ${EXE}" )
+# 	add_executable( ${EXE} ${TEST} )
+# 	target_link_libraries( ${EXE} ${LIBS_SPARSE} )
+# endforeach()
 
 
 # ----------------------------------------
