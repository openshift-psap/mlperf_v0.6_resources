nohup: ignoring input
STEP 1: FROM registry.access.redhat.com/rhel7.6
STEP 2: RUN set -vx && echo "7.6" > /etc/yum/vars/releasever && yum-config-manager --enable rhel-7-server-optional-rpms && yum -y -v -t install "https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm" && yum clean all && yum -y update && cd /var/cache && /bin/rm -rf dnf yum
--> Using cache 05c02875a9466b22d4cd95c5846b09ec60106b074dcca19e88b72daae22ae61a
STEP 3: RUN set -vx && echo -e 'set -vx \nfor (( TRY=1; TRY<=11; TRY++ )); do \n    yum -y -v install $@ \n    result=$? \n    for PKG in $@ ; do \n        yum list installed | grep "^$PKG" \n        (( result += $? )) \n    done \n    if (( $result == 0 )); then \n        /bin/rm -rf /var/cache/yum \n        /bin/rm -rf /var/cache/dnf \n        exit 0 \n    fi \n    sleep 10 \ndone \nexit 1 \n' > /tmp/yum_install.sh && chmod +x /tmp/yum_install.sh && cd /usr/local && /bin/rm -rf lib64 && ln -s lib lib64 && /tmp/yum_install.sh     binutils     bzip2     findutils     gcc     gcc-c++     gcc-gfortran     git     gzip     make     patch     pciutils     unzip     vim-enhanced     wget     xz     zip
--> Using cache 095fde3083999c853da65391c302b9206485bdcc6f96207118bdf98b7281b8c1
STEP 4: RUN set -vx && mkdir -p /tmp/gcc_tmp_build_dir; cd /tmp/gcc_tmp_build_dir; wget -q "https://ftp.gnu.org/gnu/gcc/gcc-7.4.0/gcc-7.4.0.tar.xz"; wget -q "https://gcc.gnu.org/pub/gcc/infrastructure/gmp-6.1.0.tar.bz2"; wget -q "https://gcc.gnu.org/pub/gcc/infrastructure/mpfr-3.1.4.tar.bz2"; wget -q "https://gcc.gnu.org/pub/gcc/infrastructure/mpc-1.0.3.tar.gz"; wget -q "https://gcc.gnu.org/pub/gcc/infrastructure/isl-0.18.tar.bz2"; tar -xf gcc-7.4.0.tar.xz; tar -xf gmp-6.1.0.tar.bz2; tar -xf mpfr-3.1.4.tar.bz2; tar -xf mpc-1.0.3.tar.gz; tar -xf isl-0.18.tar.bz2; ln -s /tmp/gcc_tmp_build_dir/gmp-6.1.0 gcc-7.4.0/gmp; ln -s /tmp/gcc_tmp_build_dir/mpfr-3.1.4 gcc-7.4.0/mpfr; ln -s /tmp/gcc_tmp_build_dir/mpc-1.0.3 gcc-7.4.0/mpc; ln -s /tmp/gcc_tmp_build_dir/isl-0.18 gcc-7.4.0/isl; gcc-7.4.0/configure --disable-multilib --enable-languages=c,c++,fortran --prefix=/usr/local; make -j`getconf _NPROCESSORS_ONLN`; make install-strip; cd /tmp; /bin/rm -rf /tmp/gcc_tmp_build_dir
--> Using cache d47622fc79fb3e6cef824929b2ba53830948e6c10a691c18f5059dc668a5a5fd
STEP 5: ENV CC="/usr/local/bin/gcc" CXX="/usr/local/bin/g++" LD_LIBRARY_PATH="/usr/local/lib${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}"
--> Using cache 3a951bc183c7c7df7360ccf01888e962d68926eeeda38acb3056c785f3235cff
STEP 6: RUN set -vx && /tmp/yum_install.sh     bzip2-devel     expat-devel     gdbm-devel     libdb4-devel     libffi-devel     ncurses-devel     openssl-devel     readline-devel     sqlite-devel     tk-devel     xz-devel     zlib-devel && cd /var/cache && /bin/rm -rf dnf yum && cd /tmp && wget "https://www.python.org/ftp/python/3.6.8/Python-3.6.8.tar.xz" && tar -xf Python*.xz && /bin/rm Python*.xz && cd /tmp/Python* && ./configure     --enable-optimizations     --enable-shared     --prefix=/usr/local     --with-ensurepip=install     LDFLAGS="-Wl,-rpath /usr/local/lib" && make -j`getconf _NPROCESSORS_ONLN` install && cd /usr/local/include && PYTHON_INC_DIR_NAME=`ls -d python*` && ALT_PYTHON_INC_DIR_NAME=${PYTHON_INC_DIR_NAME%m} && if [ "$ALT_PYTHON_INC_DIR_NAME" != "$PYTHON_INC_DIR_NAME" ]; then     ln -s "$PYTHON_INC_DIR_NAME" "$ALT_PYTHON_INC_DIR_NAME"; fi && cd /tmp && /bin/rm -r /tmp/Python* && /usr/local/bin/pip3 -v install --upgrade     pip     setuptools && if python --version > /dev/null 2>&1; then     whereis python; else     cd /usr/local/bin;     ln -s python3 python; fi
--> Using cache b19681311a74b9d8a67204440d9dfad5f8bdc43edbe5bdbb9b6bdebd7510d15b
STEP 7: RUN set -vx && cd /tmp && wget "https://cmake.org/files/v3.13/cmake-3.13.3.tar.gz" && tar -xf cmake*.gz && /bin/rm cmake*.gz && cd /tmp/cmake* && ./bootstrap && make -j`getconf _NPROCESSORS_ONLN` install && cd /tmp && /bin/rm -rf /tmp/cmake* && cmake --version
--> Using cache 721f9a792d60012bb1760b756c49c5acb48b87f20072bb6e56e376e57eefdfe3
STEP 8: RUN date; df -h
--> Using cache 8579032d2083760a8569641a45c9168639546ccc31e1ba45d66e10e014b49183
STEP 9: RUN set -vx && echo -e 'exec > /etc/yum.repos.d/cuda.repo \necho [cuda] \necho name=cuda \nif [ -f /etc/fedora-release ]; then \necho baseurl="http://developer.download.nvidia.com/compute/cuda/repos/fedora27/x86_64" \nelse \necho baseurl="http://developer.download.nvidia.com/compute/cuda/repos/rhel7/x86_64" \nfi \necho enabled=1 \necho gpgcheck=0 \n' >> /tmp/Make_CUDA_Repo.sh && sh /tmp/Make_CUDA_Repo.sh && /tmp/yum_install.sh cuda-10-1 && echo -e '\nexport CUDA_HOME=/usr/local/cuda \nexport CUDA_PATH=/usr/local/cuda \nexport PATH=/usr/local/cuda/bin:/usr/local/bin:/usr/bin:${PATH} \nexport LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH \n\n' >> ~/.bashrc
--> Using cache 668e56f0c2fd88a676ecd0430d14dbc2869e298bb1a2c5fbfb5077e8f9d691b0
STEP 10: ENV CUDA_VERSION="10.1" CUDA_HOME="/usr/local/cuda" CUDA_PATH="/usr/local/cuda" PATH="/usr/local/cuda/bin:/usr/local/bin:/usr/bin:${PATH:+:${PATH}}" LD_LIBRARY_PATH="/usr/local/cuda/lib64:${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}"
--> Using cache d49c363e3b73a2c6f4933021789d442ac9f02e67dd733bba97475e24a2194606
STEP 11: RUN set -vx && cd /tmp && git clone --depth 1 "https://github.com/NVIDIA/nccl.git" --branch=v2.4.6-1 && cd /tmp/nccl && if grep install Makefile ; then     echo "Makefile already has install target"; else     echo "install: src.install" >> Makefile; fi && make -j`getconf _NPROCESSORS_ONLN` src.build && make -j`getconf _NPROCESSORS_ONLN` install && cd /tmp && /bin/rm -rf /tmp/nccl* && ldconfig 
--> Using cache 41f8ce5258057f0860a9d2a9187751a96bb45e557553342d3801b5f697a4a110
STEP 12: RUN set -vx && cd /tmp && echo -e 'set -vx \nif [ -d "/usr/local/cuda-10.1" ]; then \n    CUDNN_VER="v7.5.0/cudnn-10.1-linux-x64-v7.5.0.56.tgz" \nelif [ -d "/usr/local/cuda-9.2" ]; then \n    CUDNN_VER="v7.4.2/cudnn-9.2-linux-x64-v7.4.2.24.tgz" \nelif [ -d "/usr/local/cuda-9.1" ]; then \n    CUDNN_VER="v7.1.3/cudnn-9.1-linux-x64-v7.1.tgz" \nelif [ -d "/usr/local/cuda-9.0" ]; then \n    CUDNN_VER="v7.4.2/cudnn-9.0-linux-x64-v7.4.2.24.tgz" \nelif [ -d "/usr/local/cuda-8.0" ]; then \n    CUDNN_VER="v7.1.3/cudnn-8.0-linux-x64-v7.1.tgz" \nelse \n    CUDNN_VER="idk_cudnn_version" \nfi \necho "http://developer.download.nvidia.com/compute/redist/cudnn/$CUDNN_VER" \n' > /tmp/select_cudnn.sh && wget `sh /tmp/select_cudnn.sh` && tar -xvf cudnn*.tgz && cd /tmp/cuda && mv include/cudnn.h /usr/local/cuda/include && mv lib64/lib* /usr/local/cuda/lib64 && cd /tmp && /bin/rm -rf /tmp/cud* && ldconfig
--> Using cache b1f08f6620d44ff0eb13ab84cb2f6f63f9d983691b859c49635f1593368f9b5a
STEP 13: RUN date; df -h
--> Using cache 72ccda180deb352674607a63b19bb61c727cd8b38a988abbc2638104bd4d75e6
STEP 14: RUN set -vx && /usr/local/bin/pip3 -v install     numpy && /usr/local/bin/python3 -c 'import numpy'
--> Using cache c97a0202ee83132d6edda6d4b9cb51b829dbcd834551be568223c2eb13116108
STEP 15: RUN date; df -h
--> Using cache 7a820f3c1582ec4bcb7c1c19a7a4fd5be0bb11c25561f7331222e783ad77c010
STEP 16: RUN pip install tqdm pyyaml
--> Using cache 78cb0b8b9d69ed7396c37a00880ee14e5bb89626e62c45347524773ac27a7246
STEP 17: WORKDIR /opt/pytorch
--> Using cache acb5f5dde1a6bb73231921851ff1b0b9cce80724306c23d44634194e4cc2eff4
STEP 18: COPY pytorch .
--> Using cache 08401baa24836264a0ecb7a318f508602ebb84299658d4ec4cf77293232c5251
STEP 19: WORKDIR /opt/pytorch/pytorch
--> Using cache 5a0166dff046a6f02d84daef97e00ab040d73b7c0525b299306ea5d8462f827a
STEP 20: ENV PYTORCH_BUILD_VERSION=1.1.0a0+828a6a3 PYTORCH_VERSION=1.1.0a0+828a6a3 PYTORCH_BUILD_NUMBER=0
--> Using cache 6e45abde5381c5788a72088a0ca14044317be4583c67228a0a4a39741d9bae11
STEP 21: RUN python3 setup.py install && cp -a /opt/pytorch/pytorch/third_party/ideep/mkl-dnn/external/mklml_lnx*/lib/* /usr/local/lib64 && python3 setup.py clean && rm -rf /opt/pytorch/pytorch/build
--> Using cache 6ff6a6d5f8f3123a0acacd273e845fa8798cad477b3b6f07f4aa89b3ffcb2d37
STEP 22: WORKDIR /opt/pytorch/vision
--> Using cache ba2062641843bc9c3a2c0944082be6378fcada9fd8b6aee6d13aed53d149e1f8
STEP 23: RUN python3 setup.py install && python3 setup.py clean
--> Using cache 59a3d4cc56abed04184741a122c0023a0ce7ef36e36098ce57f03a2d4fa75ee5
STEP 24: WORKDIR /opt/pytorch/apex 
--> Using cache d0d3f6d83e2995d72832fc9a564edd96babd5b6c957645edd283b09e8cfb2031
STEP 25: RUN rm -rf build && python3 setup.py install --cuda_ext --cpp_ext
--> Using cache 3b0b41b38cf839af651c511853da8d7733dc04c419c0323a12777d6ccaf0d510
STEP 26: RUN yum -y install numactl         infiniband-diags         pciutils &&     rm -rf /var/lib/apt/lists/*
--> Using cache 8569c2da0a4bcb9a379f51b72a38fb24fdb4fe29bb2c6f7ef7a95b72275e4889
STEP 27: WORKDIR /workspace/rnn_translator
--> Using cache f9dabf25cc3e1e67d5f70a57f86833fccac04477eae3afee7c990411843abc86
STEP 28: COPY requirements.txt .
--> Using cache d89622c92084096cd629f675d4a6f290d518c78ca2a74a1e7239f742d59f935a
STEP 29: RUN pip install --no-cache-dir https://github.com/mlperf/training/archive/6289993e1e9f0f5c4534336df83ff199bd0cdb75.zip#subdirectory=compliance  && pip install --no-cache-dir -r requirements.txt
--> Using cache 0e896329a39c3be38816304cb544d511dc79e06bce00fd22119766cc41c8099a
STEP 30: COPY seq2seq/csrc seq2seq/csrc
--> Using cache 43eee82fdd3beca6c5858d5edbbda14dd82ac005d00b2cbb5a6895ff96dd486a
STEP 31: COPY setup.py .
--> Using cache 97c7adbd9abac64c02229c055df1856247fd8f7d3742460d835eebc087915022
STEP 32: RUN pip install .
--> Using cache d9574b35ddb84b665b77f75386b9f47cfbc3505d05d6b75d959c36ab1ac23cf7
STEP 33: COPY . .
410fc8ffd9d2be2c44de78e27ed4a74e7320b9425aa082a46fd3a675f9dfad3c
STEP 34: RUN ls; rm -rf pytorch; ls
Dockerfile
LICENSE
README.md
bind_launch.py
build_log.out
config_DGX1.sh
config_DGX1_multi.sh
config_DGX2.sh
config_DGX2_multi.sh
config_DGX2_multi_16x16x32.sh
download_dataset.sh
mlperf_log_utils.py
ngc_build_log.out
nohup.out
podman_run.sub
preprocess_data.py
requirements.txt
rhel_dockerfile
run.sub
run_and_time.sh
scripts
seq2seq
setup.py
train.py
translate.py
verify_dataset.sh
Dockerfile
LICENSE
README.md
bind_launch.py
build_log.out
config_DGX1.sh
config_DGX1_multi.sh
config_DGX2.sh
config_DGX2_multi.sh
config_DGX2_multi_16x16x32.sh
download_dataset.sh
mlperf_log_utils.py
ngc_build_log.out
nohup.out
podman_run.sub
preprocess_data.py
requirements.txt
rhel_dockerfile
run.sub
run_and_time.sh
scripts
seq2seq
setup.py
train.py
translate.py
verify_dataset.sh
8941a66066d74f4be4bf25adf29619b3cbc1175b1a49894bbc14a7e376f277d5
STEP 35: ENV LANG en_US.utf-8
8b54c3c71f8c2cf27a47a1c5234aa90b5093945dd48f47602d0fdce05890608f
STEP 36: ENV LC_ALL en_US.utf-8
c68ae9cddc0f39869225c49184c0fe4b9f3113b760fbff1791fa604e86ef49d9
STEP 37: ENV OMP_NUM_THREADS=1
8fa34d08db7e5af95eba5983d5ba8badec29d79269b511443f68dd7a937fef6b
STEP 38: ENV OPENCV_FOR_THREADS_NUM=1
5ee0dd400322d39d524393e43379c99ff0d33c8cd0e7db35369e992ec0c59097
STEP 39: ENV NVIDIA_PYTORCH_VERSION="RHEL"
3526a68205b33092eff3efea7896f9dc1ac7e71e3a1137963c582b4541d0db56
STEP 40: ENV OPENMPI_VERSION=3.0.2
830eb54f509487dc591305092806fee643d61d78ae3be94173372a2d6a424f72
STEP 41: ENV CUDA_DRIVER_VERSION=418.67
c4eece1477aceec98cfb1ed4c8896a539576df1d39642be6c0a6d5be67d313f9
STEP 42: ENV NCCL_VERSION=2.3.7
39f2f1fd760f6dafd76eabebb4f821107ee4519e9b4a987985537617aa416f81
STEP 43: ENV CUDNN_VERSION=7.4
aa2dfed6d082a8571e2d68bea33ea3eab7d386a7bc233cd1f5d686c4635a2cd2
STEP 44: ENV CUBLAS_VERSION=10.0.130
0d440307c3b333f70fe61b8687da5d441d387ab35f2817ba8c4bca0ca0bd1cf8
STEP 45: ENV TRT_VERSION=none
f12772fee33a5591bc5317059e2b2121d83b56600adfc9adef775e069c8a29d5
STEP 46: ENV DALI_VERSION=none
STEP 47: COMMIT rhel_gnmt
a6d87d7e3c369c0b4b1fee4301fc033c30722a412cfc0196433bceca11578f2b
